// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IMathematics is an autogenerated mock type for the IMathematics type
type IMathematics struct {
	mock.Mock
}

// Addition provides a mock function with given fields: valueA, valueB
func (_m *IMathematics) Addition(valueA float64, valueB float64) (float64, error) {
	ret := _m.Called(valueA, valueB)

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64, float64) float64); ok {
		r0 = rf(valueA, valueB)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64, float64) error); ok {
		r1 = rf(valueA, valueB)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Division provides a mock function with given fields: valueA, valueB
func (_m *IMathematics) Division(valueA float64, valueB float64) (float64, error) {
	ret := _m.Called(valueA, valueB)

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64, float64) float64); ok {
		r0 = rf(valueA, valueB)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64, float64) error); ok {
		r1 = rf(valueA, valueB)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Multiplication provides a mock function with given fields: valueA, valueB
func (_m *IMathematics) Multiplication(valueA float64, valueB float64) (float64, error) {
	ret := _m.Called(valueA, valueB)

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64, float64) float64); ok {
		r0 = rf(valueA, valueB)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64, float64) error); ok {
		r1 = rf(valueA, valueB)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subtraction provides a mock function with given fields: valueA, valueB
func (_m *IMathematics) Subtraction(valueA float64, valueB float64) (float64, error) {
	ret := _m.Called(valueA, valueB)

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64, float64) float64); ok {
		r0 = rf(valueA, valueB)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64, float64) error); ok {
		r1 = rf(valueA, valueB)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
